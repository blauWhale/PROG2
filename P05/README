README.txt

Authors:
Simon Akubueze
CÃ©line Grandchamp
MÃ©lina Langmeier
Generative AI tools  were used in phases of this work.
Institute of Applied Information Technology InIT ZHAW School of Engineering

Overview:
Function: find train connections between cities.
 It includes a basic "machine learning" logic that uses a blacklist to avoid querying connections that dont exist.
 The application is built using Python and leverages several libraries such as:
 `requests` for HTTP requests, `tinydb` for database management, `geopy` for geolocation, and `haversine` for distance calculations.

The primary functionality includes:
- Fetching train connections between cities.
1. Between cities in Switzerland and larger cities in France.
2. Between Switzerland and larger cities in France and other cities in europe.
- Storing city coordinates and train company information in a TinyDB database.
- Managing a blacklist to avoid redundant API requests.
- Suggesting alternative routes if direct connections are not available.
- Show the link to reach the final city with the national rail of the country.
- Logging and tracking information.

Files:
- train_app.py: Main script to handle user input, fetch train connections, and manage the blacklist.
- db.py: Script to initialize and populate the database with city and train company information.
- city_data.json: TinyDB database file that stores city data, train company information, and the blacklist.

Requirements:
Make sure you have the following Python packages installed:
```sh
pip install requests tinydb geopy haversine

Class Diagram:
City
-----
Attributes:
- name: str
- country: str
- coordinates: tuple

TrainCompany
------------
Attributes:
- country: str
- variations: list

Blacklist
---------
Attributes:
- from_city: str
- to_city: str

Database
--------
Attributes:
- cities: TinyDB
- train_companies: TinyDB
- blacklist: TinyDB

Methods:
- add_city_to_db(city_data: dict) -> None
- add_train_company_to_db(country: str, variations: list) -> None
- update_database() -> None

TrainConnectionFinder
---------------------
Attributes:
- database: Database

Methods:
- is_blacklisted(from_city: str, to_city: str) -> bool
- add_to_blacklist(from_city: str, to_city: str) -> None
- fetch_connections(from_city: str, to_city: str) -> list
- format_connections(connections: list) -> str
- get_country(city: str) -> str
- find_nearest_city_within_angle(start_coords: tuple, end_coords: tuple) -> str
- calculate_percentage_covered(start_coords: tuple, intermediate_coords: tuple, end_coords: tuple) -> float

